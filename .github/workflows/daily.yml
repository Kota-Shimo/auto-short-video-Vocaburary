name: Auto-Podcast-Daily

on:
  schedule:
    - cron: '0 15 * * *'   # JST00:00
    #- cron: '0 18 * * *'   # JST03:00
    - cron: '0 21 * * *'   # JST06:00
    #- cron: '0 0  * * *'   # JST09:00
    - cron: '0 3  * * *'   # JST12:00
   # - cron: '0 6  * * *'   # JST15:00
    - cron: '0 9  * * *'   # JST18:00
    #- cron: '0 12 * * *'   # JST21:00
  workflow_dispatch:

concurrency:
  group: auto-podcast-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 540

    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: 📦 Install requirements
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ffmpeg
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt

      - name: 🔑 Restore YouTube tokens
        env:
          YT_ACC1: ${{ secrets.YT_TOKEN_ACC1 }}
          YT_ACC2: ${{ secrets.YT_TOKEN_ACC2 }}
          YT_ACC3: ${{ secrets.YT_TOKEN_ACC3 }}
          YT_ACC4: ${{ secrets.YT_TOKEN_ACC4 }}
          YT_ACC5: ${{ secrets.YT_TOKEN_ACC5 }}
          YT_ACC6: ${{ secrets.YT_TOKEN_ACC6 }}
        run: |
          mkdir -p tokens
          echo "$YT_ACC1" | base64 -d > tokens/token_acc1.pkl
          echo "$YT_ACC2" | base64 -d > tokens/token_acc2.pkl
          echo "$YT_ACC3" | base64 -d > tokens/token_acc3.pkl
          echo "$YT_ACC4" | base64 -d > tokens/token_acc4.pkl
          echo "$YT_ACC5" | base64 -d > tokens/token_acc5.pkl
          echo "$YT_ACC6" | base64 -d > tokens/token_acc6.pkl

      # ▼ ここだけ変更：vocab を強制（1回だけ回したい用）
      - name: 🎲 Pick content mode (force vocab)
        id: mode
        run: echo "mode=vocab" | tee -a "$GITHUB_OUTPUT"

      # ▼ vocab のときは topic を AUTO に（main.py が語彙リストを自動生成）
      - name: 📝 Pick today’s topic
        id: topic
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          MODE: ${{ steps.mode.outputs.mode }}
        shell: bash
        run: |
          if [ "${{ steps.mode.outputs.mode }}" = "vocab" ]; then
            echo "topic=AUTO" | tee -a "$GITHUB_OUTPUT"
          else
            topic=$(python - <<'PY'
from topic_picker import pick_by_content_type
import os
print(pick_by_content_type(os.environ.get("MODE","wisdom"), "ja"))
PY
            )
            echo "topic=$topic" | tee -a "$GITHUB_OUTPUT"
          fi

      - name: 🎬 Build & Upload All Combos
        env:
          OPENAI_API_KEY:      ${{ secrets.OPENAI_API_KEY }}
          UNSPLASH_ACCESS_KEY: ${{ secrets.UNSPLASH_ACCESS_KEY }}
          CONTENT_MODE:        ${{ steps.mode.outputs.mode }}
          # ▼ vocab用オプション（必要に応じて変更OK）
          VOCAB_WORDS:         "5"        # 1本に含める単語数
          VOCAB_THEME:         "hotel"    # hotel / airport / restaurant など
          VOCAB_SILENT_SECOND: "1"        # 2行目（単語+訳）を無音表示なら "1"
        run: |
          python main.py "${{ steps.topic.outputs.topic }}" \
            --turns 8 \
            --privacy public \
            --chunk 40